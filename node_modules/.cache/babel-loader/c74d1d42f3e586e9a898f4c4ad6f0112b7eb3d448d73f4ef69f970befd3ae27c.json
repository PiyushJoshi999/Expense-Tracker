{"ast":null,"code":"var _jsxFileName = \"/home/piyush/react-expense-tracker/src/Components/HomeComponent.js\",\n  _s = $RefreshSig$();\nimport styled from 'styled-components';\nimport OverviewComponent from './OverviewComponent';\nimport Transaction from './Transaction';\nimport { useState, useEffect, useContext } from 'react';\nimport AuthForm from './AuthForm';\nimport AuthContext from './auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 30px 0 10px;\n  width: 360px;\n`;\n_c = Container;\nconst HomeComponent = props => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [expense, updateExpense] = useState(0);\n  const [income, updateIncome] = useState(0);\n  // const [showSignUp, setShowSignUp] = useState(true);\n\n  const authCtx = useContext(AuthContext);\n  const isLoggedIn = authCtx.isLoggedIn;\n\n  // Load transactions from local storage when the component mounts\n  useEffect(() => {\n    const savedTransactions = localStorage.getItem('transactions');\n    if (savedTransactions) {\n      setTransactions(JSON.parse(savedTransactions));\n    }\n  }, []);\n\n  // Update balance and save transactions to local storage whenever transactions change\n  useEffect(() => {\n    calculateBalance();\n    localStorage.setItem('transactions', JSON.stringify(transactions));\n    localStorage.setItem('isLoggedIn', isLoggedIn);\n  }, [transactions, isLoggedIn]);\n  const addTransaction = payload => {\n    const transactionArray = [...transactions];\n    transactionArray.push(payload);\n    setTransactions(transactionArray);\n  };\n  const calculateBalance = () => {\n    let exp = 0;\n    let inc = 0;\n    transactions.forEach(payload => {\n      payload.type === 'EXPENSE' ? exp += payload.amount : inc += payload.amount;\n    });\n    updateExpense(exp);\n    updateIncome(inc);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(OverviewComponent, {\n        addTransaction: addTransaction,\n        expense: expense,\n        income: income\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Transaction, {\n        transactions: transactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeComponent, \"aLz23wV2fX6Eg7hDFdJT+l1SIiE=\");\n_c2 = HomeComponent;\nexport default HomeComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"HomeComponent\");","map":{"version":3,"names":["styled","OverviewComponent","Transaction","useState","useEffect","useContext","AuthForm","AuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","HomeComponent","props","_s","transactions","setTransactions","expense","updateExpense","income","updateIncome","authCtx","isLoggedIn","savedTransactions","localStorage","getItem","JSON","parse","calculateBalance","setItem","stringify","addTransaction","payload","transactionArray","push","exp","inc","forEach","type","amount","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/piyush/react-expense-tracker/src/Components/HomeComponent.js"],"sourcesContent":["import styled from 'styled-components';\nimport OverviewComponent from './OverviewComponent';\nimport Transaction from './Transaction';\nimport { useState, useEffect, useContext } from 'react';\nimport AuthForm from './AuthForm';\nimport AuthContext from './auth-context';\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 30px 0 10px;\n  width: 360px;\n`;\n\nconst HomeComponent = (props) => {\n  const [transactions, setTransactions] = useState([]);\n  const [expense, updateExpense] = useState(0);\n  const [income, updateIncome] = useState(0);\n // const [showSignUp, setShowSignUp] = useState(true);\n\n  const authCtx = useContext(AuthContext);\n  const isLoggedIn = authCtx.isLoggedIn;\n\n  // Load transactions from local storage when the component mounts\n  useEffect(() => {\n    const savedTransactions = localStorage.getItem('transactions');\n    if (savedTransactions) {\n      setTransactions(JSON.parse(savedTransactions));\n    }\n  }, []);\n\n  // Update balance and save transactions to local storage whenever transactions change\n  useEffect(() => {\n    calculateBalance();\n    localStorage.setItem('transactions', JSON.stringify(transactions));\n    localStorage.setItem('isLoggedIn', isLoggedIn);\n  }, [transactions, isLoggedIn]);\n\n  const addTransaction = (payload) => {\n    const transactionArray = [...transactions];\n    transactionArray.push(payload);\n    setTransactions(transactionArray);\n  };\n\n  const calculateBalance = () => {\n    let exp = 0;\n    let inc = 0;\n    transactions.forEach((payload) => {\n      payload.type === 'EXPENSE' ? (exp += payload.amount) : (inc += payload.amount);\n    });\n\n    updateExpense(exp);\n    updateIncome(inc);\n  };\n\n \n\n \n\n  return (\n    <Container>\n      {isLoggedIn ? (\n        <>\n          <OverviewComponent addTransaction={addTransaction} expense={expense} income={income} />\n          <Transaction transactions={transactions} />\n        </>\n      ) : (\n        <AuthForm />\n      )}\n    </Container>\n  );\n};\n\nexport default HomeComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}